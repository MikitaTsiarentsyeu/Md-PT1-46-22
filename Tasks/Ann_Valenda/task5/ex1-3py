import re


# 1. Реализовать функцию check_str которая получает на вход непустую
# строку и выдаёт информацию о количестве букв в верхнем и нижнем регистре.
# check_str('The quick Brow Fox') -> '3 upper case, 12 lower case'
def check_str(a):
    low_in_str = len(re.findall(r'[a-z]', a))
    upper_in_str = len(re.findall(r'[A-Z]', a))
    return f'{low_in_str } lower case, {upper_in_str} upper case'


s1 = 'English TEXTS for BegiNNers To PraCtice ReaDinG and CompreHension online AnD for Free.'
print(check_str(s1))


# 2. Реализовать функцию is_prime которая получает на вход любое число больше нуля и выдаёт True, если число
# является простым, и False, если нет.
# is_prime(787) -> True
# is_prime(777) -> False
def is_prime(num):
    if num == 1:
        return False
    if num == 2:
        return True
    if num % 2 == 0:
        return False
    border = int(num**0.5) + 2
    for divider in range(3, border, 2):
        if not num % divider:
            return False
    return True


for i in range(501):
    print(f'{i} -> {is_prime(i)}')


# 3. Реализовать функцию get_ranges, которая получает на вход непустой список неповторяющихся целых чисел,
# отсортированных по возрастанию, и которая этот список “сворачивает”.
# get_ranges([0, 1, 2, 3, 4, 7, 8, 10])  ->  "0-4, 7-8, 10"
# get_ranges([4,7,10])  -> "4, 7, 10"
# get_ranges([2, 3, 8, 9])  -> "2-3, 8-9"
def get_range(lst):
    result_str = f'{lst[0]}'
    is_sequence = False
    for index in range(len(lst) - 1):
        if lst[index + 1] - lst[index] == 1:
            is_sequence = True
        else:
            if is_sequence:
                result_str += f'-{lst[index]}, {lst[index + 1]}'
            else:
                result_str += f', {lst[index + 1]}'
            is_sequence = False
    if is_sequence:
        result_str += f'-{lst[-1]}'
    return result_str


test_sequences = [
    [1, 3, 6, 7, 8, 9, 10, 11, 13, 15],
    [1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15],
    [1, 2, 5, 6, 8, 9, 11, 13, 15],
    [1, 3, 6, 8, 9, 11, 12, 14, 15],
    [4, 7, 10]
]

for sequence in test_sequences:
    print(sequence)
    print(get_range(sequence))
